# -------------------------------------------------------------------------------------------
# This file was auto generated with the command:
# scan-to-python.pl scan_defines/dsp_fe_clkspine_scan.cfg ../dsp_fe_clkspine_scan_bits.py
# Config file contents:
#                          Field Name       Dir     Width      Mult
# -------------------------------------------------------------------------------------------
#                                 Rst         W         1         1
#                                  En         W         1         1
#
# Scan Chain Module Name = dsp_fe_clkspine_scan
# Scanchain Length = 2
# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
#    Class dsp_fe_clkspine_scan
# -------------------------------------------------------------------------------------------
class dsp_fe_clkspine_scan:

    # -----------------------------------------------------------------------------------
    #    Constructor
    # -----------------------------------------------------------------------------------
    def __init__(self, 
        Rst                                  = '0' * 1     , 
        En                                   = '0' * 1     , 
        filler                               = '0' * 0     ):

        self.filler                               = filler
        self.Rst                                  = Rst
        self.En                                   = En
        
    # -----------------------------------------------------------------------------------
    
    # -----------------------------------------------------------------------------------
    #    Get scan chain length
    # -----------------------------------------------------------------------------------
    @staticmethod
    def length(): 
        return 2

    @staticmethod
    def length_static(): 
        return 2

    # -----------------------------------------------------------------------------------
    
    # -----------------------------------------------------------------------------------
    #    Construct bits from class
    # -----------------------------------------------------------------------------------
    def to_bits(self): 
        
        bits = ''.join([bit_val for bit_val in [
            self.En,
            self.Rst,
        ]])
        
        # Output check
        if len(bits) != self.length():
            raise ValueError("Error, expecting 2 bits, got " + str(len(bits)) + "!")
        
        # Return output
        return bits
        
    # -----------------------------------------------------------------------------------
    
    # -----------------------------------------------------------------------------------
    #    Update class from bits
    # -----------------------------------------------------------------------------------
    def from_bits(self, bits): 
        
        # Check length of bits
        if len(bits) != 2:
            raise ValueError("Error, expecting 2 bits, got " + str(len(bits)) + "!")
        
        self.En                                   = bits[     0:1     ]
        self.Rst                                  = bits[     1:2     ]
        self.filler                               = '0' * 0
            
    # -----------------------------------------------------------------------------------
    
    # -----------------------------------------------------------------------------------
    #    Construct class from bits
    # -----------------------------------------------------------------------------------
    @classmethod
    def create_from_bits(cls, bits): 
        
        # Check length of bits
        if len(bits) != 2:
            raise ValueError("Error, expecting 2 bits, got " + str(len(bits)) + "!")
        
        # Create class
        return cls( 
            En                                   = bits[     0:1     ], 
            Rst                                  = bits[     1:2     ], 
            filler                               = '0' * 0)
            
    # -----------------------------------------------------------------------------------
    
    # -----------------------------------------------------------------------------------
    #    Get write bits from class
    # -----------------------------------------------------------------------------------
    def get_write_bits(self): 
        
        bits = ''.join([bit_val for bit_val in [
            self.En,
            self.Rst,
        ]])
        
        # Return output
        return bits
        
    # -----------------------------------------------------------------------------------
    
# -------------------------------------------------------------------------------------------
